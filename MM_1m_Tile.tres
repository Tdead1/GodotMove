[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://beopb55avgh1e"]

[sub_resource type="Shader" id="Shader_sd1pe"]
code = "shader_type spatial;

varying vec3 world_position;

void vertex() {
	world_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

void fragment() {
	
	if (mod(world_position.x, 2.0) < 1.0 && mod(world_position.z, 2.0) < 1.0)
		ALBEDO = vec3(0.7,0.7,0.7);
	else if (mod(world_position.x, 2.0) > 1.0 && mod(world_position.z, 2.0) > 1.0)
		ALBEDO = vec3(0.7,0.7,0.7);
	else
		ALBEDO = vec3(0.4,0.4,0.4);
	
	// Called for every pixel the material is visible on.
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[resource]
render_priority = 0
shader = SubResource("Shader_sd1pe")
